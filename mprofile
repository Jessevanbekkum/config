#!/bin/zsh
export M3_HOME='/usr/local/Cellar/maven/3.2.1/libexec'
#export M2_HOME=$M3_HOME
export GOPATH=$HOME/go
export MAVEN_OPTS='-Xms128m -Xmx1024m -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
export SCALA_HOME='/usr/local/opt/scala/idea'
export CLICOLOR='true'
export LSCOLORS="gxfxcxdxbxegedabagacad"
export GRAILS_HOME='/opt/local/share/java/grails'
#export GRADLE_HOME='/usr/local/Cellar/gradle/2.2.1'
export GRADLE_OPTS='-Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=384M'
export GROOVY_HOME=/usr/local/opt/groovy/libexec

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export SHARE_HISTORY=OFF

export ANDROID_HOME=/usr/local/opt/android-sdk

#---------
# PATH
#---------
export PATH=/Users/jvanbekkum/scripts:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
export PATH=$PATH:/Users/jvanbekkum/.jenv/bin:/usr/local/sbin:/opt/local/libexec/git-core:/usr/local/share/scala/bin:/usr/local/MacGPG2/bin
export PATH=$PATH:/Users/jvanbekkum/.jenv/shims:/usr/local/Cellar/maven/3.2.1/libexec/bin:$M3_HOME/bin

export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

#---------
# Aliases
#---------
alias cwd='pwd | pbcopy'
alias mkdir='mkdir -p'
#
eval "$(jenv init -)"

alias mkdir='mkdir -p'
alias h='history'
alias j='jobs -l'
alias which='type -a'
alias ..='cd ..'
alias path='echo -e ${PATH//:/\\n}'
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'
alias du='du -kh'       # Makes a more readable output.
alias df='df -kh'
alias getcwd='pwd'

#-------------------------------------------------------------
# Maven related
#-------------------------------------------------------------
alias mci='mvn clean install -Djava.awt.headless=true'
alias mis='mvn install -DskipTests -Djava.awt.headless=true'
alias mcis='mvn -T 1C clean install -DskipTests -Djava.awt.headless=true'
alias mp='mvn -T 1C package -Djava.awt.headless=true'
alias mps='mvn -T 1C package -DskipTests -Djava.awt.headless=true'
#-------------------------------------------------------------
# Git related
#-------------------------------------------------------------
alias gs='git status'
#-------------------------------------------------------------
# The 'ls' family
#-------------------------------------------------------------
alias ll="ls -lG"
alias ls='ls -hFG --color=auto'  # add colors for filetype recognition
alias la='ls -Al'          # show hidden files
alias lx='ls -lXB'         # sort by extension
alias lk='ls -lSr'         # sort by size, biggest last
alias lc='ls -ltcr'        # sort by and show change time, most recent last
alias lu='ls -ltur'        # sort by and show access time, most recent last
alias lt='ls -ltr'         # sort by date, most recent last
alias lm='ls -al |more'    # pipe through 'more'
alias lr='ls -lR'          # recursive ls
alias tree='tree -Csu'     # nice alternative to 'recursive ls'
# If your version of 'ls' doesn't support --group-directories-first try this:
# function ll(){ ls -lG "$@"| egrep "^d" ; ls -lXB "$@" 2>&-| \
#                egrep -v "^d|total "; }
#-------------------------------------------------------------
# tailoring 'less'
#-------------------------------------------------------------
alias more='less'
export PAGER=less
export LESSCHARSET='latin1'
export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>&-'
   # Use this if lesspipe.sh exists
export LESS='-i -N -w  -z-4 -g -e -M -X -F -R -P%t?f%f \
:stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'

#-------------------------------------------------------------
# Greeting, motd etc...
#-------------------------------------------------------------
# Define some colors first:

# No Color
# --> Nice. Has the same effect as using "ansi.sys" in DOS.
# Looks best on a terminal with black background.....
echo -e "${CYAN}This is BASH ${RED}${BASH_VERSION%.*}\
${CYAN} - DISPLAY on ${RED}$DISPLAY${NC}\n"
date
echo "The following brew packages are outdated:"
brew outdated

#----
# Z
#---
. `brew --prefix`/etc/profile.d/z.sh
function _exit()        # Function to run upon exit of shell.
{
    echo -e "${RED}Hasta la vista, baby${NC}"
}
trap _exit EXIT


#-----------
# Functions
#-----------
function tail_java()
{
    tab-purple
    grc -c conf.java tail -F $1
}

function tail_access() {
    tab-purple
    grc -c conf.access tail -f $1
}

#-------------------------------------------------------------
# File & string-related functions:
#-------------------------------------------------------------
# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'$*'*' -ls ; }
# Find a file with pattern $1 in name and Execute $2 on it:
function fe()
{ find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; }
# Find a pattern in a set of files and highlight them:
# (needs a recent version of egrep)
function fstr()
{
    OPTIND=1
    local case=""
    local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
        i) case="-i " ;;
        *) echo "$usage"; return;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
    xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more
}

function cuttail() # cut last n lines in file, 10 by default
{
    nlines=${2:-10}
    sed -n -e :a -e "1,${nlines}!{P;N;D;};N;ba" $1
}

function lowercase()  # move filenames to lowercase
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}

function swap()  # Swap 2 filenames around, if they exist
{                #(from Uzi's bashrc).
    local TMPFILE=tmp.$$     [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1
    mv "$1" $TMPFILE     mv "$2" "$1"
    mv $TMPFILE "$2"
}

# function extract()      # Handy Extract Program.
# {
#      if [ -f $1 ] ; then
#          case $1 in
#              *.tar.bz2)   tar xvjf $1     ;;
#              *.tar.gz)    tar xvzf $1     ;;
#              *.war)       unzip $1        ;;
#              *.bz2)       bunzip2 $1      ;;
#              *.rar)       unrar x $1      ;;
#              *.gz)        gunzip $1       ;;
#              *.tar)       tar xvf $1      ;;
#              *.tbz2)      tar xvjf $1     ;;
#              *.tgz)       tar xvzf $1     ;;
#              *.zip)       unzip $1        ;;
# 	         *.jar)       unzip $1        ;;
#              *.Z)         uncompress $1   ;;
#              *.7z)        7z x $1         ;;
#              *)           echo "'$1' cannot be extracted via >extract<" ;;
#          esac
#      else
#          echo "'$1' is not a valid file"
#      fi
# }

#----------------
# ITerm tab colors
#---------
#tab-color() {
#    echo -ne "\033]6;1;bg;red;brightness;$1\a"
#    echo -ne "\033]6;1;bg;green;brightness;$2\a"
#    echo -ne "\033]6;1;bg;blue;brightness;$3\a"
#}
tab-reset() {
    echo -ne "\033]6;1;bg;*;default\a"
}

# iterm coloring
function tab-color() {
    if [[ $# == 1 ]]
    then
        # convert hex to decimal
        hex=$1
        if [[ ${hex:0:1} == "#" ]]
        then
            # strip leading hash sign
            hex=${hex:1:6}
        fi
        if [[ ${#hex} == 3 ]]
        then
            # handle 3-letter hex codes
            hex="${hex:0:1}${hex:0:1}${hex:1:1}${hex:1:1}${hex:2:1}${hex:2:1}"
        fi
        r=$(printf "%d" 0x${hex:0:2})
        g=$(printf "%d" 0x${hex:2:2})
        b=$(printf "%d" 0x${hex:4:2})
    else
        r=$1
        g=$2
        b=$3
    fi
    echo -ne "\033]6;1;bg;red;brightness;$r\a"
    echo -ne "\033]6;1;bg;green;brightness;$g\a"
    echo -ne "\033]6;1;bg;blue;brightness;$b\a"
}
function tab-red() { tab-color 203 111 111; }
function tab-green() { tab-color 6cc276; }
function tab-yellow() { tab-color "#e8e9ac"; }
function tab-blue() { tab-color 6f8ccc; }
function tab-purple() { tab-color a789d4; }
function tab-orange() { tab-color fbbc79; }
function tab-white() { tab-color fff; }
function tab-gray() { tab-color c3c3c3c; }

#-------------------------------------------------------------
# Process/system related functions:
#-------------------------------------------------------------
function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
#function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }
function psef() { ps -ef | grep $1 ; }

function killps()                 # Kill by process name.
{
    local pid pname sig="-TERM"   # Default signal.
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) ; do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}

function port_in_use()
{
    sudo lsof -i -P | grep $1
}

#-------------------------------------------------------------
# Node
#-------------------------------------------------------------
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh

#-------------------------------------------------------------
# ING specific
#-------------------------------------------------------------
setroute() {
    gateway=`netstat -rn | grep default | tail -n 1 | awk '{ print $2 }'`
    sudo route delete 10.0.0.0/8 $gateway
    sudo route add 10.0.0.0/8 $gateway
}
